input EmployeeInputs {
    id: ID
    fname: String!
    lname: String!
    dateOfBirth: Date
    loginID: String
    password: String
    gender: String
    address: String
    mobile: String
    emergencyContact: String
    email: String
    dateOfJoining: Date
    role: String
    levelOfJob: String
    department: String
    employeeType: String
    eduction: String
    skills: [String]
    currentStatus:String
    sin:string
}

input EmployeeUpdateInputs {
    gender: String
    address: String
    mobile: String
    emergencyContact: String
    email: String
    title: String!
    department: String!
    currentStatus: Int!
    role: String
    department: String
    employeeType: String
    skills: [String]
    currentStatus:String
    sin:string
}


input FilterEmployeeInputs {
    role: String
    department: String
    employeeType: String
    skills: [String]
}

scalar Date

type Employee {
    id: int
    fname: String!
    lname: String!
    dateOfBirth: Date
    loginID: String
    password: String
    gender: String
    address: String
    mobile: String
    emergencyContact: String
    email: String
    dateOfJoining: Date
    role: String
    levelOfJob: String
    department: String
    employeeType: String
    eduction: String
    skills: [String]
    currentStatus:String
    sin:string
}

type Query {
    viewAllEmployees(filters: FilterEmployeeInputs): [Employee!]!
    viewSingleEmployee(id: Int!): Employee!
}

type Mutation {
    createEmployee(employee: EmployeeInputs!): Employee!
    updateEmployee(employee: EmployeeUpdateInputs): Boolean
    deleteEmployee(id: Int!): Boolean
}