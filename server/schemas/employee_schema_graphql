input EmployeeInputs {
  loginID: String
  password: String
  fname: String!
  lname: String!
  mobile: String!
  role: String!
  email: String
  gender: String
  address: String
  emergencyContact: String
  employeeType: String
  department: String
  sin: String
  token: String
  currentStatus: String
  dateOfBirth: Date
  dateOfJoining: Date!
}

input EmployeeUpdateInputs {
  _id: String!
  email: String
  gender: String
  address: String
  emergencyContact: String
  employeeType: String
  department: String
  sin: String
  currentStatus: String
}

input EmployeePasswordUpdateInputs {
  loginID: String!
  password: String!
}

input FilterEmployeeInputs {
  role: String
  department: String
  employeeType: String
}

scalar Date

type Employee {
  _id: ID
  loginID: String
  password: String
  fname: String
  lname: String
  mobile: String
  role: String
  email: String
  gender: String
  address: String
  emergencyContact: String
  employeeType: String
  department: String
  sin: String
  token: String
  currentStatus: String
  dateOfBirth: Date
  dateOfJoining: Date
}

type Query {
  viewAllEmployees(filters: FilterEmployeeInputs): [Employee!]!
  viewSingleEmployee(_id: String!): Employee!
}

type Mutation {
  addNewEmployee(employee: EmployeeInputs): Employee!
  updateEmployee(employee: EmployeeUpdateInputs): Boolean
  deleteEmployee(_id: String!): Boolean
  resetPassword(_id: String!): Boolean
  updatePassword(employee: EmployeePasswordUpdateInputs): Boolean
}
